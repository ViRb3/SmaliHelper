<FlowDocument PagePadding="5,0,5,0" AllowDrop="True" NumberSubstitution.CultureSource="User" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"><Paragraph><Run FontWeight="Bold" FontSize="13.3333333333333"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>Types</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">Dalvik's bytecode has two major classes of types, primitive types and reference types. Reference types are objects and arrays, everything else is a primitive.</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">Primitives are represented by a single letter. I didn't come up with these abbreviations - they are what is actually stored in the dex file, in string form. They are specified in the dex-format.html document (dalvik/docs/dex-format.html in the AOSP repository)</Run></Paragraph><List MarkerStyle="Disc"><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">V</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Void - can only be used for return types</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">Z</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Boolean</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">B</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Byte</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">S</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Short</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">C</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Char</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve">I </Run><Run FontSize="10.6666666666667">- Integer</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">J</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Long (64 bits)</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">F</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Float</Run></Paragraph></ListItem><ListItem><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667">D</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - Double (64 bits)</Run></Paragraph></ListItem></List><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">Objects take the form of </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF808080">L</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF0000">package/name/</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF8C00">ObjectName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">;</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - where the leading </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF808080">L</Run><Run FontSize="10.6666666666667" xml:space="preserve"> indicates that it is an object type, </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF0000">package/name/</Run><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve"> </Run><Run FontSize="10.6666666666667" xml:space="preserve">is the package that the object is in, </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF8C00">ObjectName</Run><Run FontSize="10.6666666666667" Foreground="#FFFF8C00" xml:space="preserve"> </Run><Run FontSize="10.6666666666667" xml:space="preserve">is the name of the object, and </Run><Run FontWeight="Bold" FontSize="10.6666666666667">;</Run><Run FontSize="10.6666666666667" xml:space="preserve"> denotes the end of the object name. This would be equivalent to </Run><Run FontWeight="Bold" FontSize="10.6666666666667">package.name.ObjectName</Run><Run FontSize="10.6666666666667" xml:space="preserve"> in java. Or for a more concrete example, </Run><Run FontWeight="Bold" FontSize="10.6666666666667">Ljava/lang/String;</Run><Run FontSize="10.6666666666667" xml:space="preserve"> is equivalent to </Run><Run FontWeight="Bold" FontSize="10.6666666666667">java.lang.String</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">Arrays take the form </Run><Run FontWeight="Bold" FontSize="10.6666666666667">[I</Run><Run FontSize="10.6666666666667" xml:space="preserve"> - this would be an array of integers with a single dimension. i.e. </Run><Run FontWeight="Bold" FontSize="10.6666666666667">int[]</Run><Run FontSize="10.6666666666667" xml:space="preserve"> in Java. For arrays with multiple dimensions, you simply add more </Run><Run FontWeight="Bold" FontSize="10.6666666666667">[</Run><Run FontSize="10.6666666666667" xml:space="preserve"> characters. </Run><Run FontWeight="Bold" FontSize="10.6666666666667">[[I</Run><Run FontSize="10.6666666666667" xml:space="preserve"> = </Run><Run FontWeight="Bold" FontSize="10.6666666666667">int[][]</Run><Run FontSize="10.6666666666667" xml:space="preserve">, </Run><Run FontWeight="Bold" FontSize="10.6666666666667">[[[I</Run><Run FontSize="10.6666666666667" xml:space="preserve"> = </Run><Run FontWeight="Bold" FontSize="10.6666666666667">int[][][]</Run><Run FontSize="10.6666666666667">, etc. (Note: The maximum number of dimensions you can have is 255).</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">You can also have arrays of objects, </Run><Run FontWeight="Bold" FontSize="10.6666666666667">[Ljava/lang/String;</Run><Run FontSize="10.6666666666667" xml:space="preserve"> would be an array of Strings.</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="16" xml:space="preserve"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations></Run><LineBreak /><Run FontWeight="Bold" FontSize="13.3333333333333"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>Methods</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">Methods are always specified in a very verbose form that includes the type that contains the method, the method name, the types of the parameters and the return type. All this information is required for the virtual machine to be able to find the correct method, and to be able to perform static analysis on the bytecode (for verification/optimization purposes)</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">They take the form of </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF808080">L</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF0000">package/name</Run><Run FontWeight="Bold" FontSize="10.6666666666667">/</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF8C00">ObjectName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">;-&gt;</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF0000FF">MethodName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">(</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF008000">III</Run><Run FontWeight="Bold" FontSize="10.6666666666667">)</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF8B008B">Z</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">In this example, you should recognize </Run><Run FontWeight="Bold" FontSize="10.6666666666667">L</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF0000">package/name</Run><Run FontWeight="Bold" FontSize="10.6666666666667">/</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF8C00">ObjectName</Run><Run FontSize="10.6666666666667" xml:space="preserve">; as a type. </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF0000FF">MethodName</Run><Run FontSize="10.6666666666667" xml:space="preserve"> is obviously the name of the method. (</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF008000">III</Run><Run FontSize="10.6666666666667">)</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF8B008B">Z</Run><Run FontSize="10.6666666666667" xml:space="preserve"> is the method's signature. </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF008000">III</Run><Run FontSize="10.6666666666667" xml:space="preserve"> are the parameters (in this case, 3 integers), and </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF8B008B">Z</Run><Run FontSize="10.6666666666667" xml:space="preserve"> is the return type (bool).</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">The method parameters are listed one right after another, with no separators between them.</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">Here's a more complex example:</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF808080">L</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF0000">package/name</Run><Run FontWeight="Bold" FontSize="10.6666666666667">/</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF8C00">ObjectName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">;-&gt;</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF0000FF">MethodName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">(</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF008000">I[[IILjava/lang/String</Run><Run FontSize="10.6666666666667" Foreground="#FF008000">;</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF008000">[Ljava/lang/Object;</Run><Run FontWeight="Bold" FontSize="10.6666666666667">)</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF808080">L</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF9932CC">java/lang/String</Run><Run FontSize="10.6666666666667">;</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">In java, this would be</Run></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF8B008B">String</Run><Run FontWeight="Bold" FontSize="10.6666666666667" xml:space="preserve"> </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF0000FF">MethodName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">(</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF008000">int, int[][], int, String, Object[]</Run><Run FontWeight="Bold" FontSize="10.6666666666667">)</Run><LineBreak /><Run FontWeight="Bold" xml:space="preserve" /></Paragraph><Paragraph><Run FontWeight="Bold" FontSize="13.3333333333333"><Run.TextDecorations><TextDecoration Location="Underline" /></Run.TextDecorations>Fields</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667">Fields are likewise always specified in verbose form that includes the type that contains the field, the name of the field, and the type of the field. Again, this is to allow the virtual machine to be able to find the correct field, as well as to perform static analysis on the bytecode.</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">They take the form of </Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF808080">L</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF0000">package/name</Run><Run FontWeight="Bold" FontSize="10.6666666666667">/</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FFFF8C00">ObjectName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">;-&gt;</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF0000FF">FieldName</Run><Run FontWeight="Bold" FontSize="10.6666666666667">:</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF808080">L</Run><Run FontWeight="Bold" FontSize="10.6666666666667" Foreground="#FF9932CC">java/lang/String</Run><Run FontWeight="Bold" FontSize="10.6666666666667">;</Run></Paragraph><Paragraph><Run FontSize="10.6666666666667" xml:space="preserve">This should be pretty self-explanatory - it is the package  and object name, the field name and the type of the field respectively.</Run></Paragraph></FlowDocument>